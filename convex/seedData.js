import { mutation } from "./_generated/server";

// Funci√≥n para agregar datos de ejemplo
export const seedSampleData = mutation({
  handler: async (ctx) => {
    // Verificar si ya hay posts
    const existingPosts = await ctx.db.query("posts").collect();
    if (existingPosts.length > 0) {
      return { message: "Sample data already exists" };
    }

    // Crear posts de ejemplo
    const samplePosts = [
      {
        title: "Quiero poder recibir pagos en mi aplicaci√≥n",
        content: "Estar√≠a muy bien que implementaran una funcionalidad para poder integrar pasarelas de pagos a los proyectos.",
        author: "Juan Pablo Narchi",
        email: "juan@example.com",
        type: "üí° Solicitud de Funcionalidades",
        status: "Open",
        votes: 0,
        likes: 0,
        createdAt: Date.now(),
      },
      {
        title: "Mejorar el sistema de b√∫squeda",
        content: "Ser√≠a genial tener un buscador m√°s avanzado con filtros por categor√≠a y fecha.",
        author: "Juan P√©rez",
        email: "juan.perez@example.com", 
        type: "üí° Solicitud de Funcionalidades",
        status: "In Review",
        votes: 12,
        likes: 8,
        createdAt: Date.now() - (6 * 24 * 60 * 60 * 1000), // 6 d√≠as atr√°s
      },
      {
        title: "Modo oscuro mejorado",
        content: "El modo oscuro actual est√° bien, pero podr√≠a tener mejor contraste en algunos elementos.",
        author: "Mar√≠a Garc√≠a",
        email: "maria@example.com",
        type: "üí° Solicitud de Funcionalidades", 
        status: "Open",
        votes: 8,
        likes: 5,
        createdAt: Date.now() - (2 * 24 * 60 * 60 * 1000), // 2 d√≠as atr√°s
      }
    ];

    const createdPosts = [];
    for (const post of samplePosts) {
      const postId = await ctx.db.insert("posts", post);
      createdPosts.push(postId);
    }

    // Crear comentarios de ejemplo
    if (createdPosts.length > 0) {
      await ctx.db.insert("comments", {
        postId: createdPosts[1], // Para el post de b√∫squeda
        author: "Ana L√≥pez",
        content: "Excelente idea! Tambi√©n ser√≠a √∫til poder filtrar por popularidad.",
        createdAt: Date.now() - (1 * 24 * 60 * 60 * 1000),
      });

      const commentId = await ctx.db.insert("comments", {
        postId: createdPosts[1],
        author: "Carlos Ruiz", 
        content: "¬øHan considerado usar Elasticsearch para esto?",
        createdAt: Date.now() - (1 * 24 * 60 * 60 * 1000),
      });

      // Crear respuesta de ejemplo
      await ctx.db.insert("replies", {
        commentId,
        author: "Juan P√©rez",
        content: "S√≠, Elasticsearch ser√≠a una buena opci√≥n, aunque tambi√©n podr√≠amos considerar Algolia.",
        createdAt: Date.now() - (12 * 60 * 60 * 1000), // 12 horas atr√°s
      });
    }

    return { message: "Sample data created successfully", postsCreated: createdPosts.length };
  },
});